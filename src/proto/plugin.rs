// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `plugin.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct Empty {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Empty {
    fn default() -> &'a Empty {
        <Empty as ::protobuf::Message>::default_instance()
    }
}

impl Empty {
    pub fn new() -> Empty {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Empty {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Empty {
        Empty::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Empty>(
                "Empty",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Empty {
        static instance: ::protobuf::rt::LazyV2<Empty> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Empty::new)
    }
}

impl ::protobuf::Clear for Empty {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Empty {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Empty {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InitializeRequest {
    // message fields
    pub config_path: ::std::string::String,
    pub pier_id: ::std::string::String,
    pub extra: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InitializeRequest {
    fn default() -> &'a InitializeRequest {
        <InitializeRequest as ::protobuf::Message>::default_instance()
    }
}

impl InitializeRequest {
    pub fn new() -> InitializeRequest {
        ::std::default::Default::default()
    }

    // string config_path = 1;


    pub fn get_config_path(&self) -> &str {
        &self.config_path
    }
    pub fn clear_config_path(&mut self) {
        self.config_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_config_path(&mut self, v: ::std::string::String) {
        self.config_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_config_path(&mut self) -> &mut ::std::string::String {
        &mut self.config_path
    }

    // Take field
    pub fn take_config_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.config_path, ::std::string::String::new())
    }

    // string pier_id = 2;


    pub fn get_pier_id(&self) -> &str {
        &self.pier_id
    }
    pub fn clear_pier_id(&mut self) {
        self.pier_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_pier_id(&mut self, v: ::std::string::String) {
        self.pier_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pier_id(&mut self) -> &mut ::std::string::String {
        &mut self.pier_id
    }

    // Take field
    pub fn take_pier_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.pier_id, ::std::string::String::new())
    }

    // bytes extra = 3;


    pub fn get_extra(&self) -> &[u8] {
        &self.extra
    }
    pub fn clear_extra(&mut self) {
        self.extra.clear();
    }

    // Param is passed by value, moved
    pub fn set_extra(&mut self, v: ::std::vec::Vec<u8>) {
        self.extra = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extra(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.extra
    }

    // Take field
    pub fn take_extra(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.extra, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for InitializeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.config_path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.pier_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.extra)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.config_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.config_path);
        }
        if !self.pier_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.pier_id);
        }
        if !self.extra.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.extra);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.config_path.is_empty() {
            os.write_string(1, &self.config_path)?;
        }
        if !self.pier_id.is_empty() {
            os.write_string(2, &self.pier_id)?;
        }
        if !self.extra.is_empty() {
            os.write_bytes(3, &self.extra)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InitializeRequest {
        InitializeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "config_path",
                |m: &InitializeRequest| { &m.config_path },
                |m: &mut InitializeRequest| { &mut m.config_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "pier_id",
                |m: &InitializeRequest| { &m.pier_id },
                |m: &mut InitializeRequest| { &mut m.pier_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "extra",
                |m: &InitializeRequest| { &m.extra },
                |m: &mut InitializeRequest| { &mut m.extra },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InitializeRequest>(
                "InitializeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InitializeRequest {
        static instance: ::protobuf::rt::LazyV2<InitializeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InitializeRequest::new)
    }
}

impl ::protobuf::Clear for InitializeRequest {
    fn clear(&mut self) {
        self.config_path.clear();
        self.pier_id.clear();
        self.extra.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InitializeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InitializeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubmitIBTPResponse {
    // message fields
    pub status: bool,
    pub message: ::std::string::String,
    pub result: ::protobuf::SingularPtrField<super::ibtp::IBTP>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubmitIBTPResponse {
    fn default() -> &'a SubmitIBTPResponse {
        <SubmitIBTPResponse as ::protobuf::Message>::default_instance()
    }
}

impl SubmitIBTPResponse {
    pub fn new() -> SubmitIBTPResponse {
        ::std::default::Default::default()
    }

    // bool status = 1;


    pub fn get_status(&self) -> bool {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = false;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: bool) {
        self.status = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // .pb.IBTP result = 3;


    pub fn get_result(&self) -> &super::ibtp::IBTP {
        self.result.as_ref().unwrap_or_else(|| <super::ibtp::IBTP as ::protobuf::Message>::default_instance())
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: super::ibtp::IBTP) {
        self.result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut super::ibtp::IBTP {
        if self.result.is_none() {
            self.result.set_default();
        }
        self.result.as_mut().unwrap()
    }

    // Take field
    pub fn take_result(&mut self) -> super::ibtp::IBTP {
        self.result.take().unwrap_or_else(|| super::ibtp::IBTP::new())
    }
}

impl ::protobuf::Message for SubmitIBTPResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.status = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != false {
            my_size += 2;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if let Some(ref v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != false {
            os.write_bool(1, self.status)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if let Some(ref v) = self.result.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubmitIBTPResponse {
        SubmitIBTPResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "status",
                |m: &SubmitIBTPResponse| { &m.status },
                |m: &mut SubmitIBTPResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &SubmitIBTPResponse| { &m.message },
                |m: &mut SubmitIBTPResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ibtp::IBTP>>(
                "result",
                |m: &SubmitIBTPResponse| { &m.result },
                |m: &mut SubmitIBTPResponse| { &mut m.result },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SubmitIBTPResponse>(
                "SubmitIBTPResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SubmitIBTPResponse {
        static instance: ::protobuf::rt::LazyV2<SubmitIBTPResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SubmitIBTPResponse::new)
    }
}

impl ::protobuf::Clear for SubmitIBTPResponse {
    fn clear(&mut self) {
        self.status = false;
        self.message.clear();
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubmitIBTPResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubmitIBTPResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RollbackIBTPRequest {
    // message fields
    pub ibtp: ::protobuf::SingularPtrField<super::ibtp::IBTP>,
    pub srcChain: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RollbackIBTPRequest {
    fn default() -> &'a RollbackIBTPRequest {
        <RollbackIBTPRequest as ::protobuf::Message>::default_instance()
    }
}

impl RollbackIBTPRequest {
    pub fn new() -> RollbackIBTPRequest {
        ::std::default::Default::default()
    }

    // .pb.IBTP ibtp = 1;


    pub fn get_ibtp(&self) -> &super::ibtp::IBTP {
        self.ibtp.as_ref().unwrap_or_else(|| <super::ibtp::IBTP as ::protobuf::Message>::default_instance())
    }
    pub fn clear_ibtp(&mut self) {
        self.ibtp.clear();
    }

    pub fn has_ibtp(&self) -> bool {
        self.ibtp.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ibtp(&mut self, v: super::ibtp::IBTP) {
        self.ibtp = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ibtp(&mut self) -> &mut super::ibtp::IBTP {
        if self.ibtp.is_none() {
            self.ibtp.set_default();
        }
        self.ibtp.as_mut().unwrap()
    }

    // Take field
    pub fn take_ibtp(&mut self) -> super::ibtp::IBTP {
        self.ibtp.take().unwrap_or_else(|| super::ibtp::IBTP::new())
    }

    // bool srcChain = 2;


    pub fn get_srcChain(&self) -> bool {
        self.srcChain
    }
    pub fn clear_srcChain(&mut self) {
        self.srcChain = false;
    }

    // Param is passed by value, moved
    pub fn set_srcChain(&mut self, v: bool) {
        self.srcChain = v;
    }
}

impl ::protobuf::Message for RollbackIBTPRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.ibtp {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ibtp)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.srcChain = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.ibtp.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.srcChain != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.ibtp.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.srcChain != false {
            os.write_bool(2, self.srcChain)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RollbackIBTPRequest {
        RollbackIBTPRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ibtp::IBTP>>(
                "ibtp",
                |m: &RollbackIBTPRequest| { &m.ibtp },
                |m: &mut RollbackIBTPRequest| { &mut m.ibtp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "srcChain",
                |m: &RollbackIBTPRequest| { &m.srcChain },
                |m: &mut RollbackIBTPRequest| { &mut m.srcChain },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RollbackIBTPRequest>(
                "RollbackIBTPRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RollbackIBTPRequest {
        static instance: ::protobuf::rt::LazyV2<RollbackIBTPRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RollbackIBTPRequest::new)
    }
}

impl ::protobuf::Clear for RollbackIBTPRequest {
    fn clear(&mut self) {
        self.ibtp.clear();
        self.srcChain = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RollbackIBTPRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RollbackIBTPRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryFilterLockStartRequest {
    // message fields
    pub appchainIndex: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryFilterLockStartRequest {
    fn default() -> &'a QueryFilterLockStartRequest {
        <QueryFilterLockStartRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryFilterLockStartRequest {
    pub fn new() -> QueryFilterLockStartRequest {
        ::std::default::Default::default()
    }

    // uint64 appchainIndex = 1;


    pub fn get_appchainIndex(&self) -> u64 {
        self.appchainIndex
    }
    pub fn clear_appchainIndex(&mut self) {
        self.appchainIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_appchainIndex(&mut self, v: u64) {
        self.appchainIndex = v;
    }
}

impl ::protobuf::Message for QueryFilterLockStartRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.appchainIndex = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.appchainIndex != 0 {
            my_size += ::protobuf::rt::value_size(1, self.appchainIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.appchainIndex != 0 {
            os.write_uint64(1, self.appchainIndex)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryFilterLockStartRequest {
        QueryFilterLockStartRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "appchainIndex",
                |m: &QueryFilterLockStartRequest| { &m.appchainIndex },
                |m: &mut QueryFilterLockStartRequest| { &mut m.appchainIndex },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryFilterLockStartRequest>(
                "QueryFilterLockStartRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryFilterLockStartRequest {
        static instance: ::protobuf::rt::LazyV2<QueryFilterLockStartRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryFilterLockStartRequest::new)
    }
}

impl ::protobuf::Clear for QueryFilterLockStartRequest {
    fn clear(&mut self) {
        self.appchainIndex = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryFilterLockStartRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryFilterLockStartRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryFilterLockStartResponse {
    // message fields
    pub lockStart: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryFilterLockStartResponse {
    fn default() -> &'a QueryFilterLockStartResponse {
        <QueryFilterLockStartResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryFilterLockStartResponse {
    pub fn new() -> QueryFilterLockStartResponse {
        ::std::default::Default::default()
    }

    // uint64 lockStart = 1;


    pub fn get_lockStart(&self) -> u64 {
        self.lockStart
    }
    pub fn clear_lockStart(&mut self) {
        self.lockStart = 0;
    }

    // Param is passed by value, moved
    pub fn set_lockStart(&mut self, v: u64) {
        self.lockStart = v;
    }
}

impl ::protobuf::Message for QueryFilterLockStartResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.lockStart = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.lockStart != 0 {
            my_size += ::protobuf::rt::value_size(1, self.lockStart, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.lockStart != 0 {
            os.write_uint64(1, self.lockStart)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryFilterLockStartResponse {
        QueryFilterLockStartResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "lockStart",
                |m: &QueryFilterLockStartResponse| { &m.lockStart },
                |m: &mut QueryFilterLockStartResponse| { &mut m.lockStart },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryFilterLockStartResponse>(
                "QueryFilterLockStartResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryFilterLockStartResponse {
        static instance: ::protobuf::rt::LazyV2<QueryFilterLockStartResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryFilterLockStartResponse::new)
    }
}

impl ::protobuf::Clear for QueryFilterLockStartResponse {
    fn clear(&mut self) {
        self.lockStart = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryFilterLockStartResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryFilterLockStartResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RollbackIBTPResponse {
    // message fields
    pub status: bool,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RollbackIBTPResponse {
    fn default() -> &'a RollbackIBTPResponse {
        <RollbackIBTPResponse as ::protobuf::Message>::default_instance()
    }
}

impl RollbackIBTPResponse {
    pub fn new() -> RollbackIBTPResponse {
        ::std::default::Default::default()
    }

    // bool status = 1;


    pub fn get_status(&self) -> bool {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = false;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: bool) {
        self.status = v;
    }

    // string message = 2;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RollbackIBTPResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.status = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != false {
            my_size += 2;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != false {
            os.write_bool(1, self.status)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RollbackIBTPResponse {
        RollbackIBTPResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "status",
                |m: &RollbackIBTPResponse| { &m.status },
                |m: &mut RollbackIBTPResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &RollbackIBTPResponse| { &m.message },
                |m: &mut RollbackIBTPResponse| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RollbackIBTPResponse>(
                "RollbackIBTPResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RollbackIBTPResponse {
        static instance: ::protobuf::rt::LazyV2<RollbackIBTPResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RollbackIBTPResponse::new)
    }
}

impl ::protobuf::Clear for RollbackIBTPResponse {
    fn clear(&mut self) {
        self.status = false;
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RollbackIBTPResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RollbackIBTPResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetOutMessageRequest {
    // message fields
    pub to: ::std::string::String,
    pub idx: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetOutMessageRequest {
    fn default() -> &'a GetOutMessageRequest {
        <GetOutMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetOutMessageRequest {
    pub fn new() -> GetOutMessageRequest {
        ::std::default::Default::default()
    }

    // string to = 1;


    pub fn get_to(&self) -> &str {
        &self.to
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: ::std::string::String) {
        self.to = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut ::std::string::String {
        &mut self.to
    }

    // Take field
    pub fn take_to(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.to, ::std::string::String::new())
    }

    // uint64 idx = 2;


    pub fn get_idx(&self) -> u64 {
        self.idx
    }
    pub fn clear_idx(&mut self) {
        self.idx = 0;
    }

    // Param is passed by value, moved
    pub fn set_idx(&mut self, v: u64) {
        self.idx = v;
    }
}

impl ::protobuf::Message for GetOutMessageRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.to)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.idx = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.to.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.to);
        }
        if self.idx != 0 {
            my_size += ::protobuf::rt::value_size(2, self.idx, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.to.is_empty() {
            os.write_string(1, &self.to)?;
        }
        if self.idx != 0 {
            os.write_uint64(2, self.idx)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetOutMessageRequest {
        GetOutMessageRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "to",
                |m: &GetOutMessageRequest| { &m.to },
                |m: &mut GetOutMessageRequest| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "idx",
                |m: &GetOutMessageRequest| { &m.idx },
                |m: &mut GetOutMessageRequest| { &mut m.idx },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetOutMessageRequest>(
                "GetOutMessageRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetOutMessageRequest {
        static instance: ::protobuf::rt::LazyV2<GetOutMessageRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetOutMessageRequest::new)
    }
}

impl ::protobuf::Clear for GetOutMessageRequest {
    fn clear(&mut self) {
        self.to.clear();
        self.idx = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetOutMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetOutMessageRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetInMessageRequest {
    // message fields
    pub from: ::std::string::String,
    pub idx: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetInMessageRequest {
    fn default() -> &'a GetInMessageRequest {
        <GetInMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetInMessageRequest {
    pub fn new() -> GetInMessageRequest {
        ::std::default::Default::default()
    }

    // string from = 1;


    pub fn get_from(&self) -> &str {
        &self.from
    }
    pub fn clear_from(&mut self) {
        self.from.clear();
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: ::std::string::String) {
        self.from = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from(&mut self) -> &mut ::std::string::String {
        &mut self.from
    }

    // Take field
    pub fn take_from(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.from, ::std::string::String::new())
    }

    // uint64 idx = 2;


    pub fn get_idx(&self) -> u64 {
        self.idx
    }
    pub fn clear_idx(&mut self) {
        self.idx = 0;
    }

    // Param is passed by value, moved
    pub fn set_idx(&mut self, v: u64) {
        self.idx = v;
    }
}

impl ::protobuf::Message for GetInMessageRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.from)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.idx = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.from.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.from);
        }
        if self.idx != 0 {
            my_size += ::protobuf::rt::value_size(2, self.idx, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.from.is_empty() {
            os.write_string(1, &self.from)?;
        }
        if self.idx != 0 {
            os.write_uint64(2, self.idx)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetInMessageRequest {
        GetInMessageRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "from",
                |m: &GetInMessageRequest| { &m.from },
                |m: &mut GetInMessageRequest| { &mut m.from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "idx",
                |m: &GetInMessageRequest| { &m.idx },
                |m: &mut GetInMessageRequest| { &mut m.idx },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetInMessageRequest>(
                "GetInMessageRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetInMessageRequest {
        static instance: ::protobuf::rt::LazyV2<GetInMessageRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetInMessageRequest::new)
    }
}

impl ::protobuf::Clear for GetInMessageRequest {
    fn clear(&mut self) {
        self.from.clear();
        self.idx = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetInMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetInMessageRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetInMessageResponse {
    // message fields
    pub result: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetInMessageResponse {
    fn default() -> &'a GetInMessageResponse {
        <GetInMessageResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetInMessageResponse {
    pub fn new() -> GetInMessageResponse {
        ::std::default::Default::default()
    }

    // repeated bytes result = 1;


    pub fn get_result(&self) -> &[::std::vec::Vec<u8>] {
        &self.result
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.result = v;
    }

    // Mutable pointer to the field.
    pub fn mut_result(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.result
    }

    // Take field
    pub fn take_result(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.result, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for GetInMessageResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.result {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.result {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetInMessageResponse {
        GetInMessageResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "result",
                |m: &GetInMessageResponse| { &m.result },
                |m: &mut GetInMessageResponse| { &mut m.result },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetInMessageResponse>(
                "GetInMessageResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetInMessageResponse {
        static instance: ::protobuf::rt::LazyV2<GetInMessageResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetInMessageResponse::new)
    }
}

impl ::protobuf::Clear for GetInMessageResponse {
    fn clear(&mut self) {
        self.result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetInMessageResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetInMessageResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMetaResponse {
    // message fields
    pub meta: ::std::collections::HashMap<::std::string::String, u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMetaResponse {
    fn default() -> &'a GetMetaResponse {
        <GetMetaResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetMetaResponse {
    pub fn new() -> GetMetaResponse {
        ::std::default::Default::default()
    }

    // repeated .pb.GetMetaResponse.MetaEntry meta = 1;


    pub fn get_meta(&self) -> &::std::collections::HashMap<::std::string::String, u64> {
        &self.meta
    }
    pub fn clear_meta(&mut self) {
        self.meta.clear();
    }

    // Param is passed by value, moved
    pub fn set_meta(&mut self, v: ::std::collections::HashMap<::std::string::String, u64>) {
        self.meta = v;
    }

    // Mutable pointer to the field.
    pub fn mut_meta(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, u64> {
        &mut self.meta
    }

    // Take field
    pub fn take_meta(&mut self) -> ::std::collections::HashMap<::std::string::String, u64> {
        ::std::mem::replace(&mut self.meta, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for GetMetaResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeUint64>(wire_type, is, &mut self.meta)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeUint64>(1, &self.meta);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeUint64>(1, &self.meta, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMetaResponse {
        GetMetaResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeUint64>(
                "meta",
                |m: &GetMetaResponse| { &m.meta },
                |m: &mut GetMetaResponse| { &mut m.meta },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetMetaResponse>(
                "GetMetaResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetMetaResponse {
        static instance: ::protobuf::rt::LazyV2<GetMetaResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetMetaResponse::new)
    }
}

impl ::protobuf::Clear for GetMetaResponse {
    fn clear(&mut self) {
        self.meta.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMetaResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMetaResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NameResponse {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NameResponse {
    fn default() -> &'a NameResponse {
        <NameResponse as ::protobuf::Message>::default_instance()
    }
}

impl NameResponse {
    pub fn new() -> NameResponse {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for NameResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NameResponse {
        NameResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &NameResponse| { &m.name },
                |m: &mut NameResponse| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NameResponse>(
                "NameResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NameResponse {
        static instance: ::protobuf::rt::LazyV2<NameResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NameResponse::new)
    }
}

impl ::protobuf::Clear for NameResponse {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NameResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NameResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TypeResponse {
    // message fields
    pub types: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TypeResponse {
    fn default() -> &'a TypeResponse {
        <TypeResponse as ::protobuf::Message>::default_instance()
    }
}

impl TypeResponse {
    pub fn new() -> TypeResponse {
        ::std::default::Default::default()
    }

    // string types = 1;


    pub fn get_types(&self) -> &str {
        &self.types
    }
    pub fn clear_types(&mut self) {
        self.types.clear();
    }

    // Param is passed by value, moved
    pub fn set_types(&mut self, v: ::std::string::String) {
        self.types = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_types(&mut self) -> &mut ::std::string::String {
        &mut self.types
    }

    // Take field
    pub fn take_types(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.types, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TypeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.types)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.types.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.types);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.types.is_empty() {
            os.write_string(1, &self.types)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TypeResponse {
        TypeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "types",
                |m: &TypeResponse| { &m.types },
                |m: &mut TypeResponse| { &mut m.types },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TypeResponse>(
                "TypeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TypeResponse {
        static instance: ::protobuf::rt::LazyV2<TypeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TypeResponse::new)
    }
}

impl ::protobuf::Clear for TypeResponse {
    fn clear(&mut self) {
        self.types.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TypeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TypeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LockEvent {
    // message fields
    pub receipt: ::std::vec::Vec<u8>,
    pub proof: ::std::vec::Vec<u8>,
    pub appchainIndex: u64,
    pub blockNumber: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LockEvent {
    fn default() -> &'a LockEvent {
        <LockEvent as ::protobuf::Message>::default_instance()
    }
}

impl LockEvent {
    pub fn new() -> LockEvent {
        ::std::default::Default::default()
    }

    // bytes receipt = 1;


    pub fn get_receipt(&self) -> &[u8] {
        &self.receipt
    }
    pub fn clear_receipt(&mut self) {
        self.receipt.clear();
    }

    // Param is passed by value, moved
    pub fn set_receipt(&mut self, v: ::std::vec::Vec<u8>) {
        self.receipt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receipt(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.receipt
    }

    // Take field
    pub fn take_receipt(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.receipt, ::std::vec::Vec::new())
    }

    // bytes proof = 2;


    pub fn get_proof(&self) -> &[u8] {
        &self.proof
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof
    }

    // Take field
    pub fn take_proof(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof, ::std::vec::Vec::new())
    }

    // uint64 appchainIndex = 3;


    pub fn get_appchainIndex(&self) -> u64 {
        self.appchainIndex
    }
    pub fn clear_appchainIndex(&mut self) {
        self.appchainIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_appchainIndex(&mut self, v: u64) {
        self.appchainIndex = v;
    }

    // uint64 blockNumber = 4;


    pub fn get_blockNumber(&self) -> u64 {
        self.blockNumber
    }
    pub fn clear_blockNumber(&mut self) {
        self.blockNumber = 0;
    }

    // Param is passed by value, moved
    pub fn set_blockNumber(&mut self, v: u64) {
        self.blockNumber = v;
    }
}

impl ::protobuf::Message for LockEvent {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.receipt)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.appchainIndex = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.blockNumber = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.receipt.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.receipt);
        }
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.proof);
        }
        if self.appchainIndex != 0 {
            my_size += ::protobuf::rt::value_size(3, self.appchainIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.blockNumber != 0 {
            my_size += ::protobuf::rt::value_size(4, self.blockNumber, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.receipt.is_empty() {
            os.write_bytes(1, &self.receipt)?;
        }
        if !self.proof.is_empty() {
            os.write_bytes(2, &self.proof)?;
        }
        if self.appchainIndex != 0 {
            os.write_uint64(3, self.appchainIndex)?;
        }
        if self.blockNumber != 0 {
            os.write_uint64(4, self.blockNumber)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LockEvent {
        LockEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "receipt",
                |m: &LockEvent| { &m.receipt },
                |m: &mut LockEvent| { &mut m.receipt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof",
                |m: &LockEvent| { &m.proof },
                |m: &mut LockEvent| { &mut m.proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "appchainIndex",
                |m: &LockEvent| { &m.appchainIndex },
                |m: &mut LockEvent| { &mut m.appchainIndex },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "blockNumber",
                |m: &LockEvent| { &m.blockNumber },
                |m: &mut LockEvent| { &mut m.blockNumber },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LockEvent>(
                "LockEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LockEvent {
        static instance: ::protobuf::rt::LazyV2<LockEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LockEvent::new)
    }
}

impl ::protobuf::Clear for LockEvent {
    fn clear(&mut self) {
        self.receipt.clear();
        self.proof.clear();
        self.appchainIndex = 0;
        self.blockNumber = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LockEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LockEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateMeta {
    // message fields
    pub meta: ::std::vec::Vec<u8>,
    pub endHeader: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateMeta {
    fn default() -> &'a UpdateMeta {
        <UpdateMeta as ::protobuf::Message>::default_instance()
    }
}

impl UpdateMeta {
    pub fn new() -> UpdateMeta {
        ::std::default::Default::default()
    }

    // bytes meta = 1;


    pub fn get_meta(&self) -> &[u8] {
        &self.meta
    }
    pub fn clear_meta(&mut self) {
        self.meta.clear();
    }

    // Param is passed by value, moved
    pub fn set_meta(&mut self, v: ::std::vec::Vec<u8>) {
        self.meta = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_meta(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.meta
    }

    // Take field
    pub fn take_meta(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.meta, ::std::vec::Vec::new())
    }

    // uint64 endHeader = 2;


    pub fn get_endHeader(&self) -> u64 {
        self.endHeader
    }
    pub fn clear_endHeader(&mut self) {
        self.endHeader = 0;
    }

    // Param is passed by value, moved
    pub fn set_endHeader(&mut self, v: u64) {
        self.endHeader = v;
    }
}

impl ::protobuf::Message for UpdateMeta {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.meta)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.endHeader = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.meta.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.meta);
        }
        if self.endHeader != 0 {
            my_size += ::protobuf::rt::value_size(2, self.endHeader, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.meta.is_empty() {
            os.write_bytes(1, &self.meta)?;
        }
        if self.endHeader != 0 {
            os.write_uint64(2, self.endHeader)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateMeta {
        UpdateMeta::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "meta",
                |m: &UpdateMeta| { &m.meta },
                |m: &mut UpdateMeta| { &mut m.meta },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "endHeader",
                |m: &UpdateMeta| { &m.endHeader },
                |m: &mut UpdateMeta| { &mut m.endHeader },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateMeta>(
                "UpdateMeta",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateMeta {
        static instance: ::protobuf::rt::LazyV2<UpdateMeta> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateMeta::new)
    }
}

impl ::protobuf::Clear for UpdateMeta {
    fn clear(&mut self) {
        self.meta.clear();
        self.endHeader = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateMeta {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateMeta {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UnLock {
    // message fields
    pub token: ::std::string::String,
    pub from: ::std::string::String,
    pub receipt: ::std::string::String,
    pub amount: ::std::vec::Vec<u8>,
    pub txId: ::std::string::String,
    pub relayIndex: u64,
    pub multiSigns: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UnLock {
    fn default() -> &'a UnLock {
        <UnLock as ::protobuf::Message>::default_instance()
    }
}

impl UnLock {
    pub fn new() -> UnLock {
        ::std::default::Default::default()
    }

    // string token = 1;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }

    // string from = 2;


    pub fn get_from(&self) -> &str {
        &self.from
    }
    pub fn clear_from(&mut self) {
        self.from.clear();
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: ::std::string::String) {
        self.from = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from(&mut self) -> &mut ::std::string::String {
        &mut self.from
    }

    // Take field
    pub fn take_from(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.from, ::std::string::String::new())
    }

    // string receipt = 3;


    pub fn get_receipt(&self) -> &str {
        &self.receipt
    }
    pub fn clear_receipt(&mut self) {
        self.receipt.clear();
    }

    // Param is passed by value, moved
    pub fn set_receipt(&mut self, v: ::std::string::String) {
        self.receipt = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receipt(&mut self) -> &mut ::std::string::String {
        &mut self.receipt
    }

    // Take field
    pub fn take_receipt(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.receipt, ::std::string::String::new())
    }

    // bytes amount = 4;


    pub fn get_amount(&self) -> &[u8] {
        &self.amount
    }
    pub fn clear_amount(&mut self) {
        self.amount.clear();
    }

    // Param is passed by value, moved
    pub fn set_amount(&mut self, v: ::std::vec::Vec<u8>) {
        self.amount = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_amount(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.amount
    }

    // Take field
    pub fn take_amount(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.amount, ::std::vec::Vec::new())
    }

    // string txId = 5;


    pub fn get_txId(&self) -> &str {
        &self.txId
    }
    pub fn clear_txId(&mut self) {
        self.txId.clear();
    }

    // Param is passed by value, moved
    pub fn set_txId(&mut self, v: ::std::string::String) {
        self.txId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_txId(&mut self) -> &mut ::std::string::String {
        &mut self.txId
    }

    // Take field
    pub fn take_txId(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.txId, ::std::string::String::new())
    }

    // uint64 relayIndex = 6;


    pub fn get_relayIndex(&self) -> u64 {
        self.relayIndex
    }
    pub fn clear_relayIndex(&mut self) {
        self.relayIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_relayIndex(&mut self, v: u64) {
        self.relayIndex = v;
    }

    // repeated bytes multiSigns = 7;


    pub fn get_multiSigns(&self) -> &[::std::vec::Vec<u8>] {
        &self.multiSigns
    }
    pub fn clear_multiSigns(&mut self) {
        self.multiSigns.clear();
    }

    // Param is passed by value, moved
    pub fn set_multiSigns(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.multiSigns = v;
    }

    // Mutable pointer to the field.
    pub fn mut_multiSigns(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.multiSigns
    }

    // Take field
    pub fn take_multiSigns(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.multiSigns, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for UnLock {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.from)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.receipt)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.amount)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.txId)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.relayIndex = tmp;
                },
                7 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.multiSigns)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        if !self.from.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.from);
        }
        if !self.receipt.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.receipt);
        }
        if !self.amount.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.amount);
        }
        if !self.txId.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.txId);
        }
        if self.relayIndex != 0 {
            my_size += ::protobuf::rt::value_size(6, self.relayIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.multiSigns {
            my_size += ::protobuf::rt::bytes_size(7, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        if !self.from.is_empty() {
            os.write_string(2, &self.from)?;
        }
        if !self.receipt.is_empty() {
            os.write_string(3, &self.receipt)?;
        }
        if !self.amount.is_empty() {
            os.write_bytes(4, &self.amount)?;
        }
        if !self.txId.is_empty() {
            os.write_string(5, &self.txId)?;
        }
        if self.relayIndex != 0 {
            os.write_uint64(6, self.relayIndex)?;
        }
        for v in &self.multiSigns {
            os.write_bytes(7, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UnLock {
        UnLock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &UnLock| { &m.token },
                |m: &mut UnLock| { &mut m.token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "from",
                |m: &UnLock| { &m.from },
                |m: &mut UnLock| { &mut m.from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "receipt",
                |m: &UnLock| { &m.receipt },
                |m: &mut UnLock| { &mut m.receipt },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "amount",
                |m: &UnLock| { &m.amount },
                |m: &mut UnLock| { &mut m.amount },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "txId",
                |m: &UnLock| { &m.txId },
                |m: &mut UnLock| { &mut m.txId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "relayIndex",
                |m: &UnLock| { &m.relayIndex },
                |m: &mut UnLock| { &mut m.relayIndex },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "multiSigns",
                |m: &UnLock| { &m.multiSigns },
                |m: &mut UnLock| { &mut m.multiSigns },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UnLock>(
                "UnLock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UnLock {
        static instance: ::protobuf::rt::LazyV2<UnLock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UnLock::new)
    }
}

impl ::protobuf::Clear for UnLock {
    fn clear(&mut self) {
        self.token.clear();
        self.from.clear();
        self.receipt.clear();
        self.amount.clear();
        self.txId.clear();
        self.relayIndex = 0;
        self.multiSigns.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UnLock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UnLock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryRelayIndexResponse {
    // message fields
    pub relayIndex: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryRelayIndexResponse {
    fn default() -> &'a QueryRelayIndexResponse {
        <QueryRelayIndexResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryRelayIndexResponse {
    pub fn new() -> QueryRelayIndexResponse {
        ::std::default::Default::default()
    }

    // uint64 relayIndex = 1;


    pub fn get_relayIndex(&self) -> u64 {
        self.relayIndex
    }
    pub fn clear_relayIndex(&mut self) {
        self.relayIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_relayIndex(&mut self, v: u64) {
        self.relayIndex = v;
    }
}

impl ::protobuf::Message for QueryRelayIndexResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.relayIndex = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.relayIndex != 0 {
            my_size += ::protobuf::rt::value_size(1, self.relayIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.relayIndex != 0 {
            os.write_uint64(1, self.relayIndex)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryRelayIndexResponse {
        QueryRelayIndexResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "relayIndex",
                |m: &QueryRelayIndexResponse| { &m.relayIndex },
                |m: &mut QueryRelayIndexResponse| { &mut m.relayIndex },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryRelayIndexResponse>(
                "QueryRelayIndexResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryRelayIndexResponse {
        static instance: ::protobuf::rt::LazyV2<QueryRelayIndexResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryRelayIndexResponse::new)
    }
}

impl ::protobuf::Clear for QueryRelayIndexResponse {
    fn clear(&mut self) {
        self.relayIndex = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryRelayIndexResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryRelayIndexResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryAppchainIndexResponse {
    // message fields
    pub appchainIndex: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryAppchainIndexResponse {
    fn default() -> &'a QueryAppchainIndexResponse {
        <QueryAppchainIndexResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryAppchainIndexResponse {
    pub fn new() -> QueryAppchainIndexResponse {
        ::std::default::Default::default()
    }

    // uint64 appchainIndex = 1;


    pub fn get_appchainIndex(&self) -> u64 {
        self.appchainIndex
    }
    pub fn clear_appchainIndex(&mut self) {
        self.appchainIndex = 0;
    }

    // Param is passed by value, moved
    pub fn set_appchainIndex(&mut self, v: u64) {
        self.appchainIndex = v;
    }
}

impl ::protobuf::Message for QueryAppchainIndexResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.appchainIndex = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.appchainIndex != 0 {
            my_size += ::protobuf::rt::value_size(1, self.appchainIndex, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.appchainIndex != 0 {
            os.write_uint64(1, self.appchainIndex)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryAppchainIndexResponse {
        QueryAppchainIndexResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "appchainIndex",
                |m: &QueryAppchainIndexResponse| { &m.appchainIndex },
                |m: &mut QueryAppchainIndexResponse| { &mut m.appchainIndex },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryAppchainIndexResponse>(
                "QueryAppchainIndexResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryAppchainIndexResponse {
        static instance: ::protobuf::rt::LazyV2<QueryAppchainIndexResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryAppchainIndexResponse::new)
    }
}

impl ::protobuf::Clear for QueryAppchainIndexResponse {
    fn clear(&mut self) {
        self.appchainIndex = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryAppchainIndexResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryAppchainIndexResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct QueryLockEventByIndexRequest {
    // message fields
    pub index: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QueryLockEventByIndexRequest {
    fn default() -> &'a QueryLockEventByIndexRequest {
        <QueryLockEventByIndexRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryLockEventByIndexRequest {
    pub fn new() -> QueryLockEventByIndexRequest {
        ::std::default::Default::default()
    }

    // uint64 index = 1;


    pub fn get_index(&self) -> u64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }
}

impl ::protobuf::Message for QueryLockEventByIndexRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint64(1, self.index)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QueryLockEventByIndexRequest {
        QueryLockEventByIndexRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "index",
                |m: &QueryLockEventByIndexRequest| { &m.index },
                |m: &mut QueryLockEventByIndexRequest| { &mut m.index },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<QueryLockEventByIndexRequest>(
                "QueryLockEventByIndexRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static QueryLockEventByIndexRequest {
        static instance: ::protobuf::rt::LazyV2<QueryLockEventByIndexRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(QueryLockEventByIndexRequest::new)
    }
}

impl ::protobuf::Clear for QueryLockEventByIndexRequest {
    fn clear(&mut self) {
        self.index = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QueryLockEventByIndexRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryLockEventByIndexRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cplugin.proto\x12\x02pb\x1a\nibtp.proto\"\x07\n\x05Empty\"c\n\x11In\
    itializeRequest\x12\x1f\n\x0bconfig_path\x18\x01\x20\x01(\tR\nconfigPath\
    \x12\x17\n\x07pier_id\x18\x02\x20\x01(\tR\x06pierId\x12\x14\n\x05extra\
    \x18\x03\x20\x01(\x0cR\x05extra\"h\n\x12SubmitIBTPResponse\x12\x16\n\x06\
    status\x18\x01\x20\x01(\x08R\x06status\x12\x18\n\x07message\x18\x02\x20\
    \x01(\tR\x07message\x12\x20\n\x06result\x18\x03\x20\x01(\x0b2\x08.pb.IBT\
    PR\x06result\"O\n\x13RollbackIBTPRequest\x12\x1c\n\x04ibtp\x18\x01\x20\
    \x01(\x0b2\x08.pb.IBTPR\x04ibtp\x12\x1a\n\x08srcChain\x18\x02\x20\x01(\
    \x08R\x08srcChain\"C\n\x1bQueryFilterLockStartRequest\x12$\n\rappchainIn\
    dex\x18\x01\x20\x01(\x04R\rappchainIndex\"<\n\x1cQueryFilterLockStartRes\
    ponse\x12\x1c\n\tlockStart\x18\x01\x20\x01(\x04R\tlockStart\"H\n\x14Roll\
    backIBTPResponse\x12\x16\n\x06status\x18\x01\x20\x01(\x08R\x06status\x12\
    \x18\n\x07message\x18\x02\x20\x01(\tR\x07message\"8\n\x14GetOutMessageRe\
    quest\x12\x0e\n\x02to\x18\x01\x20\x01(\tR\x02to\x12\x10\n\x03idx\x18\x02\
    \x20\x01(\x04R\x03idx\";\n\x13GetInMessageRequest\x12\x12\n\x04from\x18\
    \x01\x20\x01(\tR\x04from\x12\x10\n\x03idx\x18\x02\x20\x01(\x04R\x03idx\"\
    .\n\x14GetInMessageResponse\x12\x16\n\x06result\x18\x01\x20\x03(\x0cR\
    \x06result\"}\n\x0fGetMetaResponse\x121\n\x04meta\x18\x01\x20\x03(\x0b2\
    \x1d.pb.GetMetaResponse.MetaEntryR\x04meta\x1a7\n\tMetaEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\
    \x04R\x05value:\x028\x01\"\"\n\x0cNameResponse\x12\x12\n\x04name\x18\x01\
    \x20\x01(\tR\x04name\"$\n\x0cTypeResponse\x12\x14\n\x05types\x18\x01\x20\
    \x01(\tR\x05types\"\x83\x01\n\tLockEvent\x12\x18\n\x07receipt\x18\x01\
    \x20\x01(\x0cR\x07receipt\x12\x14\n\x05proof\x18\x02\x20\x01(\x0cR\x05pr\
    oof\x12$\n\rappchainIndex\x18\x03\x20\x01(\x04R\rappchainIndex\x12\x20\n\
    \x0bblockNumber\x18\x04\x20\x01(\x04R\x0bblockNumber\">\n\nUpdateMeta\
    \x12\x12\n\x04meta\x18\x01\x20\x01(\x0cR\x04meta\x12\x1c\n\tendHeader\
    \x18\x02\x20\x01(\x04R\tendHeader\"\xb8\x01\n\x06UnLock\x12\x14\n\x05tok\
    en\x18\x01\x20\x01(\tR\x05token\x12\x12\n\x04from\x18\x02\x20\x01(\tR\
    \x04from\x12\x18\n\x07receipt\x18\x03\x20\x01(\tR\x07receipt\x12\x16\n\
    \x06amount\x18\x04\x20\x01(\x0cR\x06amount\x12\x12\n\x04txId\x18\x05\x20\
    \x01(\tR\x04txId\x12\x1e\n\nrelayIndex\x18\x06\x20\x01(\x04R\nrelayIndex\
    \x12\x1e\n\nmultiSigns\x18\x07\x20\x03(\x0cR\nmultiSigns\"9\n\x17QueryRe\
    layIndexResponse\x12\x1e\n\nrelayIndex\x18\x01\x20\x01(\x04R\nrelayIndex\
    \"B\n\x1aQueryAppchainIndexResponse\x12$\n\rappchainIndex\x18\x01\x20\
    \x01(\x04R\rappchainIndex\"4\n\x1cQueryLockEventByIndexRequest\x12\x14\n\
    \x05index\x18\x01\x20\x01(\x04R\x05index2\xf0\x08\n\x0eAppchainPlugin\
    \x12.\n\nInitialize\x12\x15.pb.InitializeRequest\x1a\t.pb.Empty\x12\x1d\
    \n\x05Start\x12\t.pb.Empty\x1a\t.pb.Empty\x12\x1c\n\x04Stop\x12\t.pb.Emp\
    ty\x1a\t.pb.Empty\x12\x20\n\x07GetIBTP\x12\t.pb.Empty\x1a\x08.pb.IBTP0\
    \x01\x12.\n\nSubmitIBTP\x12\x08.pb.IBTP\x1a\x16.pb.SubmitIBTPResponse\
    \x12A\n\x0cRollbackIBTP\x12\x17.pb.RollbackIBTPRequest\x1a\x18.pb.Rollba\
    ckIBTPResponse\x12$\n\x0eIncreaseInMeta\x12\x08.pb.IBTP\x1a\x08.pb.IBTP\
    \x123\n\rGetOutMessage\x12\x18.pb.GetOutMessageRequest\x1a\x08.pb.IBTP\
    \x12A\n\x0cGetInMessage\x12\x17.pb.GetInMessageRequest\x1a\x18.pb.GetInM\
    essageResponse\x12+\n\tGetInMeta\x12\t.pb.Empty\x1a\x13.pb.GetMetaRespon\
    se\x12,\n\nGetOutMeta\x12\t.pb.Empty\x1a\x13.pb.GetMetaResponse\x121\n\
    \x0fGetCallbackMeta\x12\t.pb.Empty\x1a\x13.pb.GetMetaResponse\x12%\n\x0e\
    CommitCallback\x12\x08.pb.IBTP\x1a\t.pb.Empty\x12\x20\n\nGetReceipt\x12\
    \x08.pb.IBTP\x1a\x08.pb.IBTP\x12*\n\x0cGetLockEvent\x12\t.pb.Empty\x1a\r\
    .pb.LockEvent0\x01\x12,\n\rGetUpdateMeta\x12\t.pb.Empty\x1a\x0e.pb.Updat\
    eMeta0\x01\x12!\n\x08UnEscrow\x12\n.pb.UnLock\x1a\t.pb.Empty\x12#\n\x04N\
    ame\x12\t.pb.Empty\x1a\x10.pb.NameResponse\x12$\n\x05Types\x12\t.pb.Empt\
    y\x1a\x10.pb.TypeResponse\x12Y\n\x14QueryFilterLockStart\x12\x1f.pb.Quer\
    yFilterLockStartRequest\x1a\x20.pb.QueryFilterLockStartResponse\x12H\n\
    \x15QueryLockEventByIndex\x12\x20.pb.QueryLockEventByIndexRequest\x1a\r.\
    pb.LockEvent\x12?\n\x12QueryAppchainIndex\x12\t.pb.Empty\x1a\x1e.pb.Quer\
    yAppchainIndexResponse\x129\n\x0fQueryRelayIndex\x12\t.pb.Empty\x1a\x1b.\
    pb.QueryRelayIndexResponseb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
