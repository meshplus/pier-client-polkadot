// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ibtp.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct IBTP {
    // message fields
    pub from: ::std::string::String,
    pub to: ::std::string::String,
    pub index: u64,
    pub field_type: IBTP_Type,
    pub timestamp: i64,
    pub proof: ::std::vec::Vec<u8>,
    pub payload: ::std::vec::Vec<u8>,
    pub group: ::protobuf::SingularPtrField<super::basic::StringUint64Map>,
    pub version: ::std::string::String,
    pub extra: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IBTP {
    fn default() -> &'a IBTP {
        <IBTP as ::protobuf::Message>::default_instance()
    }
}

impl IBTP {
    pub fn new() -> IBTP {
        ::std::default::Default::default()
    }

    // string from = 1;


    pub fn get_from(&self) -> &str {
        &self.from
    }
    pub fn clear_from(&mut self) {
        self.from.clear();
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: ::std::string::String) {
        self.from = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from(&mut self) -> &mut ::std::string::String {
        &mut self.from
    }

    // Take field
    pub fn take_from(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.from, ::std::string::String::new())
    }

    // string to = 2;


    pub fn get_to(&self) -> &str {
        &self.to
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: ::std::string::String) {
        self.to = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut ::std::string::String {
        &mut self.to
    }

    // Take field
    pub fn take_to(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.to, ::std::string::String::new())
    }

    // uint64 index = 3;


    pub fn get_index(&self) -> u64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    // .pb.IBTP.Type type = 4;


    pub fn get_field_type(&self) -> IBTP_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = IBTP_Type::INTERCHAIN;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: IBTP_Type) {
        self.field_type = v;
    }

    // int64 timestamp = 5;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    // bytes proof = 6;


    pub fn get_proof(&self) -> &[u8] {
        &self.proof
    }
    pub fn clear_proof(&mut self) {
        self.proof.clear();
    }

    // Param is passed by value, moved
    pub fn set_proof(&mut self, v: ::std::vec::Vec<u8>) {
        self.proof = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proof(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.proof
    }

    // Take field
    pub fn take_proof(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.proof, ::std::vec::Vec::new())
    }

    // bytes payload = 7;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    // .pb.StringUint64Map group = 8;


    pub fn get_group(&self) -> &super::basic::StringUint64Map {
        self.group.as_ref().unwrap_or_else(|| <super::basic::StringUint64Map as ::protobuf::Message>::default_instance())
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    pub fn has_group(&self) -> bool {
        self.group.is_some()
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: super::basic::StringUint64Map) {
        self.group = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut super::basic::StringUint64Map {
        if self.group.is_none() {
            self.group.set_default();
        }
        self.group.as_mut().unwrap()
    }

    // Take field
    pub fn take_group(&mut self) -> super::basic::StringUint64Map {
        self.group.take().unwrap_or_else(|| super::basic::StringUint64Map::new())
    }

    // string version = 9;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // bytes extra = 10;


    pub fn get_extra(&self) -> &[u8] {
        &self.extra
    }
    pub fn clear_extra(&mut self) {
        self.extra.clear();
    }

    // Param is passed by value, moved
    pub fn set_extra(&mut self, v: ::std::vec::Vec<u8>) {
        self.extra = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extra(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.extra
    }

    // Take field
    pub fn take_extra(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.extra, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IBTP {
    fn is_initialized(&self) -> bool {
        for v in &self.group {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.from)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.to)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.proof)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.group)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.extra)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.from.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.from);
        }
        if !self.to.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.to);
        }
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(3, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.field_type != IBTP_Type::INTERCHAIN {
            my_size += ::protobuf::rt::enum_size(4, self.field_type);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(5, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.proof.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.proof);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.payload);
        }
        if let Some(ref v) = self.group.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.version);
        }
        if !self.extra.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.extra);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.from.is_empty() {
            os.write_string(1, &self.from)?;
        }
        if !self.to.is_empty() {
            os.write_string(2, &self.to)?;
        }
        if self.index != 0 {
            os.write_uint64(3, self.index)?;
        }
        if self.field_type != IBTP_Type::INTERCHAIN {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.timestamp != 0 {
            os.write_int64(5, self.timestamp)?;
        }
        if !self.proof.is_empty() {
            os.write_bytes(6, &self.proof)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(7, &self.payload)?;
        }
        if let Some(ref v) = self.group.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.version.is_empty() {
            os.write_string(9, &self.version)?;
        }
        if !self.extra.is_empty() {
            os.write_bytes(10, &self.extra)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IBTP {
        IBTP::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "from",
                |m: &IBTP| { &m.from },
                |m: &mut IBTP| { &mut m.from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "to",
                |m: &IBTP| { &m.to },
                |m: &mut IBTP| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "index",
                |m: &IBTP| { &m.index },
                |m: &mut IBTP| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<IBTP_Type>>(
                "type",
                |m: &IBTP| { &m.field_type },
                |m: &mut IBTP| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &IBTP| { &m.timestamp },
                |m: &mut IBTP| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "proof",
                |m: &IBTP| { &m.proof },
                |m: &mut IBTP| { &mut m.proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &IBTP| { &m.payload },
                |m: &mut IBTP| { &mut m.payload },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::basic::StringUint64Map>>(
                "group",
                |m: &IBTP| { &m.group },
                |m: &mut IBTP| { &mut m.group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &IBTP| { &m.version },
                |m: &mut IBTP| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "extra",
                |m: &IBTP| { &m.extra },
                |m: &mut IBTP| { &mut m.extra },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IBTP>(
                "IBTP",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IBTP {
        static instance: ::protobuf::rt::LazyV2<IBTP> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IBTP::new)
    }
}

impl ::protobuf::Clear for IBTP {
    fn clear(&mut self) {
        self.from.clear();
        self.to.clear();
        self.index = 0;
        self.field_type = IBTP_Type::INTERCHAIN;
        self.timestamp = 0;
        self.proof.clear();
        self.payload.clear();
        self.group.clear();
        self.version.clear();
        self.extra.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IBTP {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IBTP {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum IBTP_Type {
    INTERCHAIN = 0,
    RECEIPT_SUCCESS = 1,
    RECEIPT_FAILURE = 2,
    ASSET_EXCHANGE_INIT = 3,
    ASSET_EXCHANGE_REDEEM = 4,
    ASSET_EXCHANGE_REFUND = 5,
    ASSET_EXCHANGE_RECEIPT = 6,
}

impl ::protobuf::ProtobufEnum for IBTP_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<IBTP_Type> {
        match value {
            0 => ::std::option::Option::Some(IBTP_Type::INTERCHAIN),
            1 => ::std::option::Option::Some(IBTP_Type::RECEIPT_SUCCESS),
            2 => ::std::option::Option::Some(IBTP_Type::RECEIPT_FAILURE),
            3 => ::std::option::Option::Some(IBTP_Type::ASSET_EXCHANGE_INIT),
            4 => ::std::option::Option::Some(IBTP_Type::ASSET_EXCHANGE_REDEEM),
            5 => ::std::option::Option::Some(IBTP_Type::ASSET_EXCHANGE_REFUND),
            6 => ::std::option::Option::Some(IBTP_Type::ASSET_EXCHANGE_RECEIPT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [IBTP_Type] = &[
            IBTP_Type::INTERCHAIN,
            IBTP_Type::RECEIPT_SUCCESS,
            IBTP_Type::RECEIPT_FAILURE,
            IBTP_Type::ASSET_EXCHANGE_INIT,
            IBTP_Type::ASSET_EXCHANGE_REDEEM,
            IBTP_Type::ASSET_EXCHANGE_REFUND,
            IBTP_Type::ASSET_EXCHANGE_RECEIPT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<IBTP_Type>("IBTP.Type", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for IBTP_Type {
}

impl ::std::default::Default for IBTP_Type {
    fn default() -> Self {
        IBTP_Type::INTERCHAIN
    }
}

impl ::protobuf::reflect::ProtobufValue for IBTP_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum IBTP_Category {
    REQUEST = 0,
    RESPONSE = 1,
    UNKNOWN = 2,
}

impl ::protobuf::ProtobufEnum for IBTP_Category {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<IBTP_Category> {
        match value {
            0 => ::std::option::Option::Some(IBTP_Category::REQUEST),
            1 => ::std::option::Option::Some(IBTP_Category::RESPONSE),
            2 => ::std::option::Option::Some(IBTP_Category::UNKNOWN),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [IBTP_Category] = &[
            IBTP_Category::REQUEST,
            IBTP_Category::RESPONSE,
            IBTP_Category::UNKNOWN,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<IBTP_Category>("IBTP.Category", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for IBTP_Category {
}

impl ::std::default::Default for IBTP_Category {
    fn default() -> Self {
        IBTP_Category::REQUEST
    }
}

impl ::protobuf::reflect::ProtobufValue for IBTP_Category {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct payload {
    // message fields
    pub encrypted: bool,
    pub content: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a payload {
    fn default() -> &'a payload {
        <payload as ::protobuf::Message>::default_instance()
    }
}

impl payload {
    pub fn new() -> payload {
        ::std::default::Default::default()
    }

    // bool encrypted = 1;


    pub fn get_encrypted(&self) -> bool {
        self.encrypted
    }
    pub fn clear_encrypted(&mut self) {
        self.encrypted = false;
    }

    // Param is passed by value, moved
    pub fn set_encrypted(&mut self, v: bool) {
        self.encrypted = v;
    }

    // bytes content = 2;


    pub fn get_content(&self) -> &[u8] {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.content, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for payload {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.encrypted = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.content)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.encrypted != false {
            my_size += 2;
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.content);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.encrypted != false {
            os.write_bool(1, self.encrypted)?;
        }
        if !self.content.is_empty() {
            os.write_bytes(2, &self.content)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> payload {
        payload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "encrypted",
                |m: &payload| { &m.encrypted },
                |m: &mut payload| { &mut m.encrypted },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "content",
                |m: &payload| { &m.content },
                |m: &mut payload| { &mut m.content },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<payload>(
                "payload",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static payload {
        static instance: ::protobuf::rt::LazyV2<payload> = ::protobuf::rt::LazyV2::INIT;
        instance.get(payload::new)
    }
}

impl ::protobuf::Clear for payload {
    fn clear(&mut self) {
        self.encrypted = false;
        self.content.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for payload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for payload {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct content {
    // message fields
    pub src_contract_id: ::std::string::String,
    pub dst_contract_id: ::std::string::String,
    pub func: ::std::string::String,
    pub args: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub callback: ::std::string::String,
    pub argsCb: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    pub rollback: ::std::string::String,
    pub argsRb: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a content {
    fn default() -> &'a content {
        <content as ::protobuf::Message>::default_instance()
    }
}

impl content {
    pub fn new() -> content {
        ::std::default::Default::default()
    }

    // string src_contract_id = 1;


    pub fn get_src_contract_id(&self) -> &str {
        &self.src_contract_id
    }
    pub fn clear_src_contract_id(&mut self) {
        self.src_contract_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_src_contract_id(&mut self, v: ::std::string::String) {
        self.src_contract_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_src_contract_id(&mut self) -> &mut ::std::string::String {
        &mut self.src_contract_id
    }

    // Take field
    pub fn take_src_contract_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.src_contract_id, ::std::string::String::new())
    }

    // string dst_contract_id = 2;


    pub fn get_dst_contract_id(&self) -> &str {
        &self.dst_contract_id
    }
    pub fn clear_dst_contract_id(&mut self) {
        self.dst_contract_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_dst_contract_id(&mut self, v: ::std::string::String) {
        self.dst_contract_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dst_contract_id(&mut self) -> &mut ::std::string::String {
        &mut self.dst_contract_id
    }

    // Take field
    pub fn take_dst_contract_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dst_contract_id, ::std::string::String::new())
    }

    // string func = 3;


    pub fn get_func(&self) -> &str {
        &self.func
    }
    pub fn clear_func(&mut self) {
        self.func.clear();
    }

    // Param is passed by value, moved
    pub fn set_func(&mut self, v: ::std::string::String) {
        self.func = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_func(&mut self) -> &mut ::std::string::String {
        &mut self.func
    }

    // Take field
    pub fn take_func(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.func, ::std::string::String::new())
    }

    // repeated bytes args = 4;


    pub fn get_args(&self) -> &[::std::vec::Vec<u8>] {
        &self.args
    }
    pub fn clear_args(&mut self) {
        self.args.clear();
    }

    // Param is passed by value, moved
    pub fn set_args(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.args = v;
    }

    // Mutable pointer to the field.
    pub fn mut_args(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.args
    }

    // Take field
    pub fn take_args(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.args, ::protobuf::RepeatedField::new())
    }

    // string callback = 5;


    pub fn get_callback(&self) -> &str {
        &self.callback
    }
    pub fn clear_callback(&mut self) {
        self.callback.clear();
    }

    // Param is passed by value, moved
    pub fn set_callback(&mut self, v: ::std::string::String) {
        self.callback = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_callback(&mut self) -> &mut ::std::string::String {
        &mut self.callback
    }

    // Take field
    pub fn take_callback(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.callback, ::std::string::String::new())
    }

    // repeated bytes argsCb = 6;


    pub fn get_argsCb(&self) -> &[::std::vec::Vec<u8>] {
        &self.argsCb
    }
    pub fn clear_argsCb(&mut self) {
        self.argsCb.clear();
    }

    // Param is passed by value, moved
    pub fn set_argsCb(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.argsCb = v;
    }

    // Mutable pointer to the field.
    pub fn mut_argsCb(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.argsCb
    }

    // Take field
    pub fn take_argsCb(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.argsCb, ::protobuf::RepeatedField::new())
    }

    // string rollback = 7;


    pub fn get_rollback(&self) -> &str {
        &self.rollback
    }
    pub fn clear_rollback(&mut self) {
        self.rollback.clear();
    }

    // Param is passed by value, moved
    pub fn set_rollback(&mut self, v: ::std::string::String) {
        self.rollback = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rollback(&mut self) -> &mut ::std::string::String {
        &mut self.rollback
    }

    // Take field
    pub fn take_rollback(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.rollback, ::std::string::String::new())
    }

    // repeated bytes argsRb = 8;


    pub fn get_argsRb(&self) -> &[::std::vec::Vec<u8>] {
        &self.argsRb
    }
    pub fn clear_argsRb(&mut self) {
        self.argsRb.clear();
    }

    // Param is passed by value, moved
    pub fn set_argsRb(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.argsRb = v;
    }

    // Mutable pointer to the field.
    pub fn mut_argsRb(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.argsRb
    }

    // Take field
    pub fn take_argsRb(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.argsRb, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for content {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.src_contract_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dst_contract_id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.func)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.args)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.callback)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.argsCb)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.rollback)?;
                },
                8 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.argsRb)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.src_contract_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.src_contract_id);
        }
        if !self.dst_contract_id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.dst_contract_id);
        }
        if !self.func.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.func);
        }
        for value in &self.args {
            my_size += ::protobuf::rt::bytes_size(4, &value);
        };
        if !self.callback.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.callback);
        }
        for value in &self.argsCb {
            my_size += ::protobuf::rt::bytes_size(6, &value);
        };
        if !self.rollback.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.rollback);
        }
        for value in &self.argsRb {
            my_size += ::protobuf::rt::bytes_size(8, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.src_contract_id.is_empty() {
            os.write_string(1, &self.src_contract_id)?;
        }
        if !self.dst_contract_id.is_empty() {
            os.write_string(2, &self.dst_contract_id)?;
        }
        if !self.func.is_empty() {
            os.write_string(3, &self.func)?;
        }
        for v in &self.args {
            os.write_bytes(4, &v)?;
        };
        if !self.callback.is_empty() {
            os.write_string(5, &self.callback)?;
        }
        for v in &self.argsCb {
            os.write_bytes(6, &v)?;
        };
        if !self.rollback.is_empty() {
            os.write_string(7, &self.rollback)?;
        }
        for v in &self.argsRb {
            os.write_bytes(8, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> content {
        content::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "src_contract_id",
                |m: &content| { &m.src_contract_id },
                |m: &mut content| { &mut m.src_contract_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dst_contract_id",
                |m: &content| { &m.dst_contract_id },
                |m: &mut content| { &mut m.dst_contract_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "func",
                |m: &content| { &m.func },
                |m: &mut content| { &mut m.func },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "args",
                |m: &content| { &m.args },
                |m: &mut content| { &mut m.args },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "callback",
                |m: &content| { &m.callback },
                |m: &mut content| { &mut m.callback },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "argsCb",
                |m: &content| { &m.argsCb },
                |m: &mut content| { &mut m.argsCb },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "rollback",
                |m: &content| { &m.rollback },
                |m: &mut content| { &mut m.rollback },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "argsRb",
                |m: &content| { &m.argsRb },
                |m: &mut content| { &mut m.argsRb },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<content>(
                "content",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static content {
        static instance: ::protobuf::rt::LazyV2<content> = ::protobuf::rt::LazyV2::INIT;
        instance.get(content::new)
    }
}

impl ::protobuf::Clear for content {
    fn clear(&mut self) {
        self.src_contract_id.clear();
        self.dst_contract_id.clear();
        self.func.clear();
        self.args.clear();
        self.callback.clear();
        self.argsCb.clear();
        self.rollback.clear();
        self.argsRb.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for content {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for content {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IBTPs {
    // message fields
    pub ibtps: ::protobuf::RepeatedField<IBTP>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IBTPs {
    fn default() -> &'a IBTPs {
        <IBTPs as ::protobuf::Message>::default_instance()
    }
}

impl IBTPs {
    pub fn new() -> IBTPs {
        ::std::default::Default::default()
    }

    // repeated .pb.IBTP ibtps = 1;


    pub fn get_ibtps(&self) -> &[IBTP] {
        &self.ibtps
    }
    pub fn clear_ibtps(&mut self) {
        self.ibtps.clear();
    }

    // Param is passed by value, moved
    pub fn set_ibtps(&mut self, v: ::protobuf::RepeatedField<IBTP>) {
        self.ibtps = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ibtps(&mut self) -> &mut ::protobuf::RepeatedField<IBTP> {
        &mut self.ibtps
    }

    // Take field
    pub fn take_ibtps(&mut self) -> ::protobuf::RepeatedField<IBTP> {
        ::std::mem::replace(&mut self.ibtps, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for IBTPs {
    fn is_initialized(&self) -> bool {
        for v in &self.ibtps {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.ibtps)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ibtps {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ibtps {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IBTPs {
        IBTPs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<IBTP>>(
                "ibtps",
                |m: &IBTPs| { &m.ibtps },
                |m: &mut IBTPs| { &mut m.ibtps },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IBTPs>(
                "IBTPs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IBTPs {
        static instance: ::protobuf::rt::LazyV2<IBTPs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IBTPs::new)
    }
}

impl ::protobuf::Clear for IBTPs {
    fn clear(&mut self) {
        self.ibtps.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IBTPs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IBTPs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nibtp.proto\x12\x02pb\x1a\x0bbasic.proto\"\xee\x03\n\x04IBTP\x12\x12\
    \n\x04from\x18\x01\x20\x01(\tR\x04from\x12\x0e\n\x02to\x18\x02\x20\x01(\
    \tR\x02to\x12\x14\n\x05index\x18\x03\x20\x01(\x04R\x05index\x12!\n\x04ty\
    pe\x18\x04\x20\x01(\x0e2\r.pb.IBTP.TypeR\x04type\x12\x1c\n\ttimestamp\
    \x18\x05\x20\x01(\x03R\ttimestamp\x12\x14\n\x05proof\x18\x06\x20\x01(\
    \x0cR\x05proof\x12\x18\n\x07payload\x18\x07\x20\x01(\x0cR\x07payload\x12\
    )\n\x05group\x18\x08\x20\x01(\x0b2\x13.pb.StringUint64MapR\x05group\x12\
    \x18\n\x07version\x18\t\x20\x01(\tR\x07version\x12\x14\n\x05extra\x18\n\
    \x20\x01(\x0cR\x05extra\"\xab\x01\n\x04Type\x12\x0e\n\nINTERCHAIN\x10\0\
    \x12\x13\n\x0fRECEIPT_SUCCESS\x10\x01\x12\x13\n\x0fRECEIPT_FAILURE\x10\
    \x02\x12\x17\n\x13ASSET_EXCHANGE_INIT\x10\x03\x12\x19\n\x15ASSET_EXCHANG\
    E_REDEEM\x10\x04\x12\x19\n\x15ASSET_EXCHANGE_REFUND\x10\x05\x12\x1a\n\
    \x16ASSET_EXCHANGE_RECEIPT\x10\x06\"2\n\x08Category\x12\x0b\n\x07REQUEST\
    \x10\0\x12\x0c\n\x08RESPONSE\x10\x01\x12\x0b\n\x07UNKNOWN\x10\x02\"A\n\
    \x07payload\x12\x1c\n\tencrypted\x18\x01\x20\x01(\x08R\tencrypted\x12\
    \x18\n\x07content\x18\x02\x20\x01(\x0cR\x07content\"\xe9\x01\n\x07conten\
    t\x12&\n\x0fsrc_contract_id\x18\x01\x20\x01(\tR\rsrcContractId\x12&\n\
    \x0fdst_contract_id\x18\x02\x20\x01(\tR\rdstContractId\x12\x12\n\x04func\
    \x18\x03\x20\x01(\tR\x04func\x12\x12\n\x04args\x18\x04\x20\x03(\x0cR\x04\
    args\x12\x1a\n\x08callback\x18\x05\x20\x01(\tR\x08callback\x12\x16\n\x06\
    argsCb\x18\x06\x20\x03(\x0cR\x06argsCb\x12\x1a\n\x08rollback\x18\x07\x20\
    \x01(\tR\x08rollback\x12\x16\n\x06argsRb\x18\x08\x20\x03(\x0cR\x06argsRb\
    \"'\n\x05IBTPs\x12\x1e\n\x05ibtps\x18\x01\x20\x03(\x0b2\x08.pb.IBTPR\x05\
    ibtpsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
