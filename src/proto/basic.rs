// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `basic.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct Uint64Slice {
    // message fields
    pub slice: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Uint64Slice {
    fn default() -> &'a Uint64Slice {
        <Uint64Slice as ::protobuf::Message>::default_instance()
    }
}

impl Uint64Slice {
    pub fn new() -> Uint64Slice {
        ::std::default::Default::default()
    }

    // repeated uint64 slice = 1;


    pub fn get_slice(&self) -> &[u64] {
        &self.slice
    }
    pub fn clear_slice(&mut self) {
        self.slice.clear();
    }

    // Param is passed by value, moved
    pub fn set_slice(&mut self, v: ::std::vec::Vec<u64>) {
        self.slice = v;
    }

    // Mutable pointer to the field.
    pub fn mut_slice(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.slice
    }

    // Take field
    pub fn take_slice(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.slice, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Uint64Slice {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.slice)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.slice {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.slice {
            os.write_uint64(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Uint64Slice {
        Uint64Slice::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "slice",
                |m: &Uint64Slice| { &m.slice },
                |m: &mut Uint64Slice| { &mut m.slice },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Uint64Slice>(
                "Uint64Slice",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Uint64Slice {
        static instance: ::protobuf::rt::LazyV2<Uint64Slice> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Uint64Slice::new)
    }
}

impl ::protobuf::Clear for Uint64Slice {
    fn clear(&mut self) {
        self.slice.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Uint64Slice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Uint64Slice {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringUint64Map {
    // message fields
    pub keys: ::protobuf::RepeatedField<::std::string::String>,
    pub vals: ::std::vec::Vec<u64>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringUint64Map {
    fn default() -> &'a StringUint64Map {
        <StringUint64Map as ::protobuf::Message>::default_instance()
    }
}

impl StringUint64Map {
    pub fn new() -> StringUint64Map {
        ::std::default::Default::default()
    }

    // repeated string keys = 1;


    pub fn get_keys(&self) -> &[::std::string::String] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }

    // repeated uint64 vals = 2;


    pub fn get_vals(&self) -> &[u64] {
        &self.vals
    }
    pub fn clear_vals(&mut self) {
        self.vals.clear();
    }

    // Param is passed by value, moved
    pub fn set_vals(&mut self, v: ::std::vec::Vec<u64>) {
        self.vals = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vals(&mut self) -> &mut ::std::vec::Vec<u64> {
        &mut self.vals
    }

    // Take field
    pub fn take_vals(&mut self) -> ::std::vec::Vec<u64> {
        ::std::mem::replace(&mut self.vals, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for StringUint64Map {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.keys)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_uint64_into(wire_type, is, &mut self.vals)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.vals {
            my_size += ::protobuf::rt::value_size(2, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        for v in &self.vals {
            os.write_uint64(2, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringUint64Map {
        StringUint64Map::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "keys",
                |m: &StringUint64Map| { &m.keys },
                |m: &mut StringUint64Map| { &mut m.keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "vals",
                |m: &StringUint64Map| { &m.vals },
                |m: &mut StringUint64Map| { &mut m.vals },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StringUint64Map>(
                "StringUint64Map",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StringUint64Map {
        static instance: ::protobuf::rt::LazyV2<StringUint64Map> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StringUint64Map::new)
    }
}

impl ::protobuf::Clear for StringUint64Map {
    fn clear(&mut self) {
        self.keys.clear();
        self.vals.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringUint64Map {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringUint64Map {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringUint64SliceMap {
    // message fields
    pub keys: ::protobuf::RepeatedField<::std::string::String>,
    pub vals: ::protobuf::RepeatedField<Uint64Slice>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringUint64SliceMap {
    fn default() -> &'a StringUint64SliceMap {
        <StringUint64SliceMap as ::protobuf::Message>::default_instance()
    }
}

impl StringUint64SliceMap {
    pub fn new() -> StringUint64SliceMap {
        ::std::default::Default::default()
    }

    // repeated string keys = 1;


    pub fn get_keys(&self) -> &[::std::string::String] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }

    // repeated .pb.Uint64Slice vals = 2;


    pub fn get_vals(&self) -> &[Uint64Slice] {
        &self.vals
    }
    pub fn clear_vals(&mut self) {
        self.vals.clear();
    }

    // Param is passed by value, moved
    pub fn set_vals(&mut self, v: ::protobuf::RepeatedField<Uint64Slice>) {
        self.vals = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vals(&mut self) -> &mut ::protobuf::RepeatedField<Uint64Slice> {
        &mut self.vals
    }

    // Take field
    pub fn take_vals(&mut self) -> ::protobuf::RepeatedField<Uint64Slice> {
        ::std::mem::replace(&mut self.vals, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StringUint64SliceMap {
    fn is_initialized(&self) -> bool {
        for v in &self.vals {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.keys)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.vals)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.vals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        for v in &self.vals {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringUint64SliceMap {
        StringUint64SliceMap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "keys",
                |m: &StringUint64SliceMap| { &m.keys },
                |m: &mut StringUint64SliceMap| { &mut m.keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Uint64Slice>>(
                "vals",
                |m: &StringUint64SliceMap| { &m.vals },
                |m: &mut StringUint64SliceMap| { &mut m.vals },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StringUint64SliceMap>(
                "StringUint64SliceMap",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StringUint64SliceMap {
        static instance: ::protobuf::rt::LazyV2<StringUint64SliceMap> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StringUint64SliceMap::new)
    }
}

impl ::protobuf::Clear for StringUint64SliceMap {
    fn clear(&mut self) {
        self.keys.clear();
        self.vals.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringUint64SliceMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringUint64SliceMap {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VerifiedIndex {
    // message fields
    pub index: u64,
    pub valid: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VerifiedIndex {
    fn default() -> &'a VerifiedIndex {
        <VerifiedIndex as ::protobuf::Message>::default_instance()
    }
}

impl VerifiedIndex {
    pub fn new() -> VerifiedIndex {
        ::std::default::Default::default()
    }

    // uint64 index = 1;


    pub fn get_index(&self) -> u64 {
        self.index
    }
    pub fn clear_index(&mut self) {
        self.index = 0;
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: u64) {
        self.index = v;
    }

    // bool valid = 2;


    pub fn get_valid(&self) -> bool {
        self.valid
    }
    pub fn clear_valid(&mut self) {
        self.valid = false;
    }

    // Param is passed by value, moved
    pub fn set_valid(&mut self, v: bool) {
        self.valid = v;
    }
}

impl ::protobuf::Message for VerifiedIndex {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.index = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.valid = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.index != 0 {
            my_size += ::protobuf::rt::value_size(1, self.index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.valid != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.index != 0 {
            os.write_uint64(1, self.index)?;
        }
        if self.valid != false {
            os.write_bool(2, self.valid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VerifiedIndex {
        VerifiedIndex::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "index",
                |m: &VerifiedIndex| { &m.index },
                |m: &mut VerifiedIndex| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "valid",
                |m: &VerifiedIndex| { &m.valid },
                |m: &mut VerifiedIndex| { &mut m.valid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VerifiedIndex>(
                "VerifiedIndex",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VerifiedIndex {
        static instance: ::protobuf::rt::LazyV2<VerifiedIndex> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VerifiedIndex::new)
    }
}

impl ::protobuf::Clear for VerifiedIndex {
    fn clear(&mut self) {
        self.index = 0;
        self.valid = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VerifiedIndex {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerifiedIndex {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VerifiedIndexSlice {
    // message fields
    pub slice: ::protobuf::RepeatedField<VerifiedIndex>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VerifiedIndexSlice {
    fn default() -> &'a VerifiedIndexSlice {
        <VerifiedIndexSlice as ::protobuf::Message>::default_instance()
    }
}

impl VerifiedIndexSlice {
    pub fn new() -> VerifiedIndexSlice {
        ::std::default::Default::default()
    }

    // repeated .pb.VerifiedIndex slice = 1;


    pub fn get_slice(&self) -> &[VerifiedIndex] {
        &self.slice
    }
    pub fn clear_slice(&mut self) {
        self.slice.clear();
    }

    // Param is passed by value, moved
    pub fn set_slice(&mut self, v: ::protobuf::RepeatedField<VerifiedIndex>) {
        self.slice = v;
    }

    // Mutable pointer to the field.
    pub fn mut_slice(&mut self) -> &mut ::protobuf::RepeatedField<VerifiedIndex> {
        &mut self.slice
    }

    // Take field
    pub fn take_slice(&mut self) -> ::protobuf::RepeatedField<VerifiedIndex> {
        ::std::mem::replace(&mut self.slice, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for VerifiedIndexSlice {
    fn is_initialized(&self) -> bool {
        for v in &self.slice {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.slice)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.slice {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.slice {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VerifiedIndexSlice {
        VerifiedIndexSlice::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VerifiedIndex>>(
                "slice",
                |m: &VerifiedIndexSlice| { &m.slice },
                |m: &mut VerifiedIndexSlice| { &mut m.slice },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VerifiedIndexSlice>(
                "VerifiedIndexSlice",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VerifiedIndexSlice {
        static instance: ::protobuf::rt::LazyV2<VerifiedIndexSlice> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VerifiedIndexSlice::new)
    }
}

impl ::protobuf::Clear for VerifiedIndexSlice {
    fn clear(&mut self) {
        self.slice.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VerifiedIndexSlice {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerifiedIndexSlice {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringVerifiedIndexMap {
    // message fields
    pub keys: ::protobuf::RepeatedField<::std::string::String>,
    pub vals: ::protobuf::RepeatedField<VerifiedIndex>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringVerifiedIndexMap {
    fn default() -> &'a StringVerifiedIndexMap {
        <StringVerifiedIndexMap as ::protobuf::Message>::default_instance()
    }
}

impl StringVerifiedIndexMap {
    pub fn new() -> StringVerifiedIndexMap {
        ::std::default::Default::default()
    }

    // repeated string keys = 1;


    pub fn get_keys(&self) -> &[::std::string::String] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }

    // repeated .pb.VerifiedIndex vals = 2;


    pub fn get_vals(&self) -> &[VerifiedIndex] {
        &self.vals
    }
    pub fn clear_vals(&mut self) {
        self.vals.clear();
    }

    // Param is passed by value, moved
    pub fn set_vals(&mut self, v: ::protobuf::RepeatedField<VerifiedIndex>) {
        self.vals = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vals(&mut self) -> &mut ::protobuf::RepeatedField<VerifiedIndex> {
        &mut self.vals
    }

    // Take field
    pub fn take_vals(&mut self) -> ::protobuf::RepeatedField<VerifiedIndex> {
        ::std::mem::replace(&mut self.vals, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StringVerifiedIndexMap {
    fn is_initialized(&self) -> bool {
        for v in &self.vals {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.keys)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.vals)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.vals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        for v in &self.vals {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringVerifiedIndexMap {
        StringVerifiedIndexMap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "keys",
                |m: &StringVerifiedIndexMap| { &m.keys },
                |m: &mut StringVerifiedIndexMap| { &mut m.keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VerifiedIndex>>(
                "vals",
                |m: &StringVerifiedIndexMap| { &m.vals },
                |m: &mut StringVerifiedIndexMap| { &mut m.vals },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StringVerifiedIndexMap>(
                "StringVerifiedIndexMap",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StringVerifiedIndexMap {
        static instance: ::protobuf::rt::LazyV2<StringVerifiedIndexMap> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StringVerifiedIndexMap::new)
    }
}

impl ::protobuf::Clear for StringVerifiedIndexMap {
    fn clear(&mut self) {
        self.keys.clear();
        self.vals.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringVerifiedIndexMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringVerifiedIndexMap {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StringVerifiedIndexSliceMap {
    // message fields
    pub keys: ::protobuf::RepeatedField<::std::string::String>,
    pub vals: ::protobuf::RepeatedField<VerifiedIndexSlice>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StringVerifiedIndexSliceMap {
    fn default() -> &'a StringVerifiedIndexSliceMap {
        <StringVerifiedIndexSliceMap as ::protobuf::Message>::default_instance()
    }
}

impl StringVerifiedIndexSliceMap {
    pub fn new() -> StringVerifiedIndexSliceMap {
        ::std::default::Default::default()
    }

    // repeated string keys = 1;


    pub fn get_keys(&self) -> &[::std::string::String] {
        &self.keys
    }
    pub fn clear_keys(&mut self) {
        self.keys.clear();
    }

    // Param is passed by value, moved
    pub fn set_keys(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.keys = v;
    }

    // Mutable pointer to the field.
    pub fn mut_keys(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.keys
    }

    // Take field
    pub fn take_keys(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.keys, ::protobuf::RepeatedField::new())
    }

    // repeated .pb.VerifiedIndexSlice vals = 2;


    pub fn get_vals(&self) -> &[VerifiedIndexSlice] {
        &self.vals
    }
    pub fn clear_vals(&mut self) {
        self.vals.clear();
    }

    // Param is passed by value, moved
    pub fn set_vals(&mut self, v: ::protobuf::RepeatedField<VerifiedIndexSlice>) {
        self.vals = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vals(&mut self) -> &mut ::protobuf::RepeatedField<VerifiedIndexSlice> {
        &mut self.vals
    }

    // Take field
    pub fn take_vals(&mut self) -> ::protobuf::RepeatedField<VerifiedIndexSlice> {
        ::std::mem::replace(&mut self.vals, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for StringVerifiedIndexSliceMap {
    fn is_initialized(&self) -> bool {
        for v in &self.vals {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.keys)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.vals)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.keys {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        for value in &self.vals {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.keys {
            os.write_string(1, &v)?;
        };
        for v in &self.vals {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StringVerifiedIndexSliceMap {
        StringVerifiedIndexSliceMap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "keys",
                |m: &StringVerifiedIndexSliceMap| { &m.keys },
                |m: &mut StringVerifiedIndexSliceMap| { &mut m.keys },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VerifiedIndexSlice>>(
                "vals",
                |m: &StringVerifiedIndexSliceMap| { &m.vals },
                |m: &mut StringVerifiedIndexSliceMap| { &mut m.vals },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StringVerifiedIndexSliceMap>(
                "StringVerifiedIndexSliceMap",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StringVerifiedIndexSliceMap {
        static instance: ::protobuf::rt::LazyV2<StringVerifiedIndexSliceMap> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StringVerifiedIndexSliceMap::new)
    }
}

impl ::protobuf::Clear for StringVerifiedIndexSliceMap {
    fn clear(&mut self) {
        self.keys.clear();
        self.vals.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StringVerifiedIndexSliceMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StringVerifiedIndexSliceMap {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bbasic.proto\x12\x02pb\"#\n\x0bUint64Slice\x12\x14\n\x05slice\x18\
    \x01\x20\x03(\x04R\x05slice\"9\n\x0fStringUint64Map\x12\x12\n\x04keys\
    \x18\x01\x20\x03(\tR\x04keys\x12\x12\n\x04vals\x18\x02\x20\x03(\x04R\x04\
    vals\"O\n\x14StringUint64SliceMap\x12\x12\n\x04keys\x18\x01\x20\x03(\tR\
    \x04keys\x12#\n\x04vals\x18\x02\x20\x03(\x0b2\x0f.pb.Uint64SliceR\x04val\
    s\";\n\rVerifiedIndex\x12\x14\n\x05index\x18\x01\x20\x01(\x04R\x05index\
    \x12\x14\n\x05valid\x18\x02\x20\x01(\x08R\x05valid\"=\n\x12VerifiedIndex\
    Slice\x12'\n\x05slice\x18\x01\x20\x03(\x0b2\x11.pb.VerifiedIndexR\x05sli\
    ce\"S\n\x16StringVerifiedIndexMap\x12\x12\n\x04keys\x18\x01\x20\x03(\tR\
    \x04keys\x12%\n\x04vals\x18\x02\x20\x03(\x0b2\x11.pb.VerifiedIndexR\x04v\
    als\"]\n\x1bStringVerifiedIndexSliceMap\x12\x12\n\x04keys\x18\x01\x20\
    \x03(\tR\x04keys\x12*\n\x04vals\x18\x02\x20\x03(\x0b2\x16.pb.VerifiedInd\
    exSliceR\x04valsb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
